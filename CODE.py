# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jWYLvQgwF1qHb8BXCKdTB38aY-P57zUk
"""

!pip install pycryptodome

import random
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes

class SensorNode:
    def __init__(self, node_id):
        self.node_id = node_id
        self.children = []
        self.da0ta = {}

    def add_child(self, child):
        self.children.append(child)

    def collect_data(self):
        self.data = {
            "Temperature": round(random.uniform(20, 30), 2),
            "Humidity": round(random.uniform(40, 60), 2),
            "Pressure": round(random.uniform(900, 1100), 2),
            "Noise": round(random.uniform(30, 50), 2)
        }
        return self.data


class BaseStation:
    def __init__(self):
        self.sensor_nodes = []
        self.secret_key = get_random_bytes(16)

    def add_sensor_node(self, node):
        self.sensor_nodes.append(node)

    def collect_data_from_network(self):
        all_data = {}
        for node in self.sensor_nodes:
            all_data[node.node_id] = self.encrypt_data(node.collect_data())
        return all_data

    def encrypt_data(self, data):
        cipher = AES.new(self.secret_key, AES.MODE_CBC)
        plaintext = str(data).encode('utf-8')
        ciphertext = cipher.encrypt(pad(plaintext, AES.block_size))
        return ciphertext

    def decrypt_data(self, ciphertext):
        cipher = AES.new(self.secret_key, AES.MODE_CBC)
        decrypted_data = unpad(cipher.decrypt(ciphertext), AES.block_size)
        return decrypted_data


base_station = BaseStation()

sensor_nodes = [SensorNode(f"Sensor Node {i+1}") for i in range(10)]

for node in sensor_nodes:
    base_station.add_sensor_node(node)

for i in range(len(sensor_nodes)):
    for j in range(i+1, len(sensor_nodes)):
        sensor_nodes[i].add_child(sensor_nodes[j])
        sensor_nodes[j].add_child(sensor_nodes[i])

network_data = base_station.collect_data_from_network()

print("+---------------+")
print("|  Base Station  |")
print("+---------------+")
print("        |")
print("        |")
print("        v")
print("+---------------+" + "       " * (len(sensor_nodes) - 1))

for i, node in enumerate(sensor_nodes):
    if i == 0:
        print(f"|  Cluster Head |", end="")
    else:
        print("|               |", end="")
    for _ in range(len(sensor_nodes) - 1):
        print("       ", end="")
    print("\n+---------------+" + "       " * (len(sensor_nodes) - 1))

for node in sensor_nodes:
    print("        |                       " * (len(sensor_nodes) - 1) + "|")
    print("        |                       " * (len(sensor_nodes) - 1) + "|")
    print("        v                       " * (len(sensor_nodes) - 1) + "v")
    print("+---------------+" + "       " * (len(sensor_nodes) - 1))

for i, node in enumerate(sensor_nodes):
    print(f"|  Sensor Node {i+1:2}  |", end="")
    for _ in range(len(sensor_nodes) - 1):
        print("|               |", end="")
    print("\n|               |" + "       " * (len(sensor_nodes) - 1))
    print("+---------------+" + "       " * (len(sensor_nodes) - 1))

print("\nSensor Nodes and Cluster Head Connected to Base Station\n")

for node_id, data in network_data.items():
    print(f"Data collected by {node_id}: {data}")

for node_id, ciphertext in network_data.items():
    decrypted_data = base_station.decrypt_data(ciphertext)
    print(f"Decrypted data collected by {node_id}: {decrypted_data.hex()}")
